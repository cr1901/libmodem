#targets SConscript
#Get settings.py values to determine the target. Use platform as well.

import os
Import('env')

#Use Scons default tools if they are built in (with changes to relevant variables
if env['TARGET_OS'] == 'win32':
    env = env.Clone(tools = ['mingw'], \
        CCFLAGS='-ansi -Wall -Wextra -pedantic-errors')
    if env['BUILD_TYPE'] == 'Release':
    	    env.Append(CCFLAGS=' -Os')
    env['CC'] ='i686-w64-mingw32-gcc' # Override gcc for path conflict reasons.

elif env['TARGET_OS'] == 'hdmi2usb-lm32':
    env = env.Clone(tools = ['hdmi2usb-lm32'], \
        CCFLAGS = '-Wall -Wextra -pedantic-errors -std=c99')
    env.Append(CPPPATH = [
        env['HDMI2USB']['SOC_DIRECTORY'] + '/software/include/base',
        env['HDMI2USB']['SOC_DIRECTORY'] + '/software/include',
        env['HDMI2USB']['SOC_DIRECTORY'] + '/software/common',
        env['HDMI2USB']['BUILDINC_DIRECTORY']]
    )
    env.Append(CFLAGS = ' -Os ' + env['HDMI2USB']['CPUFLAGS'] + ' -fomit-frame-pointer -Wall -fno-builtin -nostdinc')
    env.Append(CCFLAGS = ' -fexceptions -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes')
    env.Append(CXXFLAGS = ' -std=c++11' + env['HDMI2USB']['SOC_DIRECTORY'] + '/software/include/basec++ -fexceptions -fno-rtti -ffreestanding' )

#However, if the tools to build do NOT exist, execute a script to create them.
elif env['TARGET_OS'] == 'dos':
    env = env.Clone(tools = ['watcom'])
    env.Append(CCFLAGS='-bt=dos -za -wx')
    env['MEMMODEL16'] = 's'

#If host same as target
if env['PLATFORM'].lower() == env['TARGET_OS'].lower():
    env.Alias('install', env['HOST_INSTALL_DIR'])

#env.Append(CPPPATH = Dir('#/BIN/' + env['TARGET_OS']))
#else:
#    env.Alias('install', 'xfer')

env.AppendENVPath('PATH', env['HOST_INSTALL_DIR'])
if env['EXTRA_PATH']:
    env.AppendENVPath('PATH', env['EXTRA_PATH'])

bld = Builder(action = 'TRXCOM /T /X /CRC /1K /B:115200 /P:4 $SOURCE', src_suffix = env['PROGSUFFIX'])
env.Append(BUILDERS = {'Xfer' : bld})

Return('env')
