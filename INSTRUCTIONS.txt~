INSTRUCTIONS FILE FOR PORTING:

***YOUR TASK:
The XMODEM functionality currently works correctly. What I need you to do is port the OS-specific serial routines to your system using the template instructions I give starting at line 204 or so at MODEM.H. Look at my code for the DOS/Windows implementation of serial routines in USR_DEF.C for examples. Whatever you do, MAKE SURE to change the serial_handle typedef to whatever your system requires (some sort of handle, I bet) at line 139 in MODEM.H. TRXCOM.C should compile as is on Windows- the switches use DOS-style syntax. Maybe Linux porting can be done as well (including fixing the command line switches to not be order dependent)!

***FILES:
The following is a list of source files:
SRC\MODEM.H- Header file. Any functions with an explicit 'extern' must be implemented on your own.
COMLIB.H- DOS serial routines. Ignore them for your task (I didn't include them :P).
SRC\CONFIG.H- Implementation specific options. serial_handle_t should be there as well honestly, but I'm not done rearranging the code.
SRC\USR_DEF.C- Implementation-specific code and routines.
SRC\XMODEM.C- XMODEM functionality
SRC\TRXCOM.C- Executable source

BIN\TRXCOM.EXE- 32 bit test executable. Overwrite it as you please.
BIN\GET, BIN\SEND- Test batch files for TX/RX using various options.
BIN\SETUP.DBG- The customization file for the Watcom Debugger. Can safely be ignored.

TEST\- Test files to transfer. Capture_*.bin reflects XMODEM output to file.
COMMON- Common MAKEFILE variables.
MAKEFILE, BIN\MAKEFILE- Self explanatory

Alter the Makefile as needed. I personally do NOT use Microsoft's C compiler (I prefer OpenWatcom C compiler because of it's legacy support), but it should compile being mostly ANSI 89 C (except for <stdint.h>, which is C89). I use Watcom C Compiler with either Geany or Code::Blocks as an 'IDE'. The Watcom Linker (WLINK), on the other hand, is weird, so you may need to change the Makefile syntax to get the Makefile to work correctly.


***TESTING AND TOOLS:
TO test these routines, download the signed version of the com0com virtual null modem cable driver:

http://pete.akeo.ie/2011/07/com0com-signed-drivers.html ...

and send and receive files between the port within windows command prompts and your target (be it a microcontroller or a VM host). I can probably cheat Linux into using virtual COM ports solely by file redirection. 

Google ymodem.txt for the X/YMODEM protocol. YMODEM functionality is not yet implemented.

Realterm may also be of some help as a Serial port debugger, and Hyperterminal and TeraTerm have a known-to-be-correct XMODEM implementation.

***CONTACT:
Good luck and have fun! Contact me on Skype (GreatResolution) or at thor0505@comcast.net if you have questions. I'll answer ASAP. Please DO NOT spend too much time looking at other portions of the source code than those I have mentioned in this file- it's a mess, but it works as far as I can tell using RealTerm and Hyperterminal.